#Contexto Integrado dos Setores
#Imagine um grupo empresarial que opera nas seguintes frentes:
#- Uma rede de hospitais privados que atende pacientes de planos de sa√∫de.
#- Uma divis√£o de log√≠stica e seguran√ßa respons√°vel por entregar medicamentos e equipamentos hospitalares com alta rastreabilidade.
#- Uma empresa atacadista de insumos m√©dicos, com fluxo elevado de produtos para cl√≠nicas, farm√°cias e hospitais.
#- Uma corretora de im√≥veis corporativos, respons√°vel por negocia√ß√µes hospitalares, cl√≠nicas e galp√µes log√≠sticos.
#- Um sistema de presta√ß√£o de servi√ßos integrados, que atua com manuten√ß√£o, corretagem, transporte e seguran√ßa.

#Gera√ß√£o de Dados Sint√©ticos (Clientes e Opera√ß√µes)
import numpy as np

np.random.seed(42)

n_clientes = 5000

# IDs fict√≠cios
clientes_id = np.arange(1, n_clientes + 1)

# Setores distribu√≠dos (c√≥digos de √°rea de atua√ß√£o)
setores = np.random.choice(['Hospital', 'Log√≠stica', 'Atacado', 'Corretagem', 'Servi√ßo'], size=n_clientes)

# Faturamento mensal em R$
faturamento = np.random.normal(loc=15000, scale=5000, size=n_clientes).clip(5000, 30000)

# N√∫mero m√©dio de atendimentos ou transa√ß√µes
operacoes = np.random.poisson(lam=50, size=n_clientes)

# N√≠vel de risco ou complexidade (0 a 1)
risco_operacional = np.random.rand(n_clientes)

#An√°lises Avan√ßadas com NumPy + Scikit-learn
#Clustering (agrupamento de clientes por perfil de opera√ß√£o)
from sklearn.cluster import KMeans

# Vetor de caracter√≠sticas
X = np.column_stack((faturamento, operacoes, risco_operacional))

# Agrupamento em 4 perfis
kmeans = KMeans(n_clusters=4, random_state=42)
grupos = kmeans.fit_predict(X)



#Regress√£o: Faturamento vs. Volume Operacional
from sklearn.cluster import KMeans

modelo = LinearRegression()
modelo.fit(operacoes.reshape(-1, 1), faturamento)

# Coeficientes
coef = modelo.coef_[0]
intercepto = modelo.intercept_

#Indicadores por setor:
# M√©dia de faturamento por setor
setores_unicos = np.unique(setores)
media_por_setor = {s: np.mean(faturamento[setores == s]) for s in setores_unicos}

# Total de clientes por setor
contagem_setores = {s: np.sum(setores == s) for s in setores_unicos}

#Mini Dashboard de Resultados:
print("üìä Clientes por Setor:")
for setor, qtd in contagem_setores.items():
    print(f"  {setor}: {qtd} clientes")

print("\nüí∞ M√©dia de Faturamento por Setor:")
for setor, media in media_por_setor.items():
    print(f"  {setor}: R$ {media:,.2f}")

print(f"\nüîç Regress√£o Linear: Faturamento vs Opera√ß√µes")
print(f"  Faturamento = {coef:.2f} √ó Opera√ß√µes + {intercepto:.2f}")

print("\nüß™ Cluster de Clientes (perfis):")
unique, counts = np.unique(grupos, return_counts=True)
for cluster_id, qtd in zip(unique, counts):
    print(f"  Grupo {cluster_id}: {qtd} clientes")



